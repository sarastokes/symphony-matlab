classdef PropertyDemo < symphonyui.core.persistent.descriptions.SourceDescription
    
    methods
        
        function obj = PropertyDemo()
            import symphonyui.core.*;
            
            obj.addProperty('double', pi, ...
                'category', 'Primitive', ...
                'description', 'Standard MatLab type');
            obj.addProperty('integer', int32(23), ...
                'category', 'Primitive', ...
                'description', '32-bit integer value')
            obj.addProperty('interval', int32(2), ...
                'type', PropertyType('int32', 'scalar', [0 6]), ...
                'category', 'Primitive', ...
                'description', '32-bit integer value with an interval domain')
            obj.addProperty('enumerated', int32(-1), ...
                'type', PropertyType('int32', 'scalar', {int32(-1), int32(0), int32(1)}), ...
                'category', 'Primitive', ...
                'description', '32-bit integer value with an enumerated domain')
            obj.addProperty('logical', true, ...
                'category', 'Primitive', ...
                'description', 'Boolean value that takes either true or false')
            obj.addProperty('doubleMatrix', [1, 2], ...
                'type', PropertyType('denserealdouble', 'matrix'), ...
                'category', 'Compound', ...
                'description', 'Matrix of standard MatLab type')
            obj.addProperty('string', 'a sample string', ...
                'type', PropertyType('char', 'row'), ...
                'category', 'Compound', ...
                'description', 'Row vector of characters')
            obj.addProperty('set', {'a', 'set'}, ...
                'type', PropertyType('cellstr', 'row', {'a', 'set', 'of', 'strings'}), ...
                'category', 'Compound', ...
                'description', 'Row cell array whose every element is a string (char array)')
            obj.addProperty('selection', 'spring', ...
                'type', PropertyType('char', 'row', {'spring', 'summer', 'fall', 'winter'}), ...
                'category', 'Compound', ...
                'description', 'Row vector of characters that can take any of the predefined set of values')
            obj.addProperty('suggestion', 'banana', ...
                'type', PropertyType('char', 'row', {'banana', 'apple', 'pear', 'kiwi', '...'}), ...
                'category', 'Compound', ...
                'description', 'Row vector of characters that offers suggestions');
            obj.addProperty('number', 1, ...
                'type', PropertyType('denserealdouble', 'row', {1, 2, 3, 4}), ...
                'category', 'Compound', ...
                'description', 'Row vector of characters that can take any of the predefined set of values');
            obj.addProperty('date', datestr(now), ...
                'type', PropertyType('char', 'row', 'datestr'), ...
                'category', 'Compound', ...
                'description', 'Row vector of characters that can take a date string');
            obj.addProperty('tree', 'folder 2\item 1', ...
                'type', PropertyType('char', 'row', containers.Map({'folder 1', 'folder 2', 'item 1'}, {{'item 1', 'item 2'}, {'item 1', 'item 2'}, []})), ...
                'category', 'Compound', ...
                'description', 'Row vector of characters that can take any of the predefined set of values');
            
            obj.addAllowableParentType([]);
        end
        
    end
    
end

